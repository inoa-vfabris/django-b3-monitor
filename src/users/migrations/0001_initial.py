# Generated by Django 4.2 on 2023-12-10 15:32

import uuid

import django.contrib.auth.models
from django.db import migrations, models

import app.models.base
import app.validators.doc
import users.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Group",
            fields=[],
            options={
                "verbose_name": "user group",
                "verbose_name_plural": "user groups",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth.group",),
            managers=[
                ("objects", django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "id",
                    app.models.base.UUIDPrimaryKeyField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Id",
                    ),
                ),
                ("full_name", models.CharField(max_length=255, verbose_name="full name")),
                (
                    "email",
                    models.EmailField(max_length=254, unique=True, verbose_name="email address"),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("admin", "admin"), ("investor", "investor")],
                        default="admin",
                        max_length=8,
                        verbose_name="role",
                    ),
                ),
                (
                    "cpf",
                    models.CharField(
                        error_messages={"unique": "A user with this CPF already exists"},
                        max_length=11,
                        unique=True,
                        validators=[app.validators.doc.CpfValidator()],
                        verbose_name="cpf",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Inactive users can't login. Use this instead of deleting the user.",
                        verbose_name="is active",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Only staff users can access the admin",
                        verbose_name="is staff",
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Super users have all permissions",
                        verbose_name="is admin",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(auto_now_add=True, verbose_name="date joined"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
            managers=[
                ("objects", users.models.UserManager()),
            ],
        ),
    ]
